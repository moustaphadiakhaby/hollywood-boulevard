import Link from "next/link";
import axios from "axios";
import Image from "next/image";
import Head from "next/head";
import Movie from "@/models/Movie";
import checkIfConnected from "@/middleware/checkIfConnected";
import { useState } from "react";
import { useRouter } from "next/router";

const MoviePage = ({ data }) => {
  const [input, setInput] = useState("");

  const router = useRouter();

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      await axios.post("http://localhost:3000/api/movies/addReview", {
        id: data._id,
        text: input,
      });
    } catch (error) {
      console.log(error.message);
    }

    router.reload();
  };

  return (
    <>
      <Head>
        <title>{data.title}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="mx-auto flex min-h-[75vh] w-[1400px] flex-col items-center justify-center gap-10 bg-red-400 p-[30px]">
        <p className="my-5 text-3xl">{data.title}</p>
        <Image
          width={400}
          height={400}
          src={process.env.NEXT_PUBLIC_IMAGE_URL + data.poster_path}
          alt="movie"
        />

        <div className="bg-white px-10 py-5">
          {data.reviews.map((review) => {
            return <p key={review}>{review}</p>;
          })}
        </div>

        <Link href={"/"}>Vers la page d'accueil</Link>

        <form
          onSubmit={(e) => {
            handleSubmit(e);
          }}
          className="flex w-[40%] gap-5"
        >
          <input
            type="text"
            value={input}
            onChange={(e) => {
              setInput(e.target.value);
            }}
            className="flex-1 px-5"
          />
          <button type="submit" className="bg-green-600 p-3 text-white">
            Envoyer
          </button>
        </form>
      </div>
    </>
  );
};

export default MoviePage;

export const getServerSideProps = async (context) => {
  try {
    checkIfConnected();
  } catch (error) {
    console.log(error.message);
  }

  let movies = [];
  // Nous allons, tout simplement, récupérer tous les éléments de la collection Article
  try {
    movies = await Movie.findById(context.params.id);
  } catch (error) {
    console.log(error.message);
  }

  return {
    props: {
      // Nous devons rendre serializable ce que nous renvoie mongoose
      data: JSON.parse(JSON.stringify(movies)),
    },
  };
};

// export const getStaticPaths = async () => {
//   try {
//     const { data } = await axios.get(
//       "https://lereacteur-bootcamp-api.herokuapp.com/api/allocine/movies/top_rated",
//       {
//         headers: {
//           Authorization: `Bearer ${process.env.NEXT_PUBLIC_API_KEY}`,
//         },
//       }
//     );

//     const paths = data.results.map((movie) => {
//       return {
//         params: {
//           id: String(movie.id),
//         },
//       };
//     });

//     return {
//       paths,
//       fallback: false, // autres valeurs possibles, plus de détails à la fin de ce chapitre
//     };
//   } catch (error) {
//     console.log("catch home>>", error.message);
//   }
// };

// export const getStaticProps = async (context) => {
//   let dataToSend = [];

//   try {
//     const { data } = await axios.get(
//       `https://lereacteur-bootcamp-api.herokuapp.com/api/allocine/movie/${context.params.id}`,
//       {
//         headers: {
//           Authorization: `Bearer ${process.env.NEXT_PUBLIC_API_KEY}`,
//         },
//       }
//     );

//     dataToSend = data;
//   } catch (error) {
//     console.log("catch home>>", error.message);
//   }

//   return {
//     props: { data: dataToSend },
//     revalidate: 10,
//   };
// };
